(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{436:function(e,t,n){e.exports=n.p+"assets/img/e0c42b478ba1460a7f6481e5e177a95.9cc93512.png"},483:function(e,t,n){"use strict";n.r(t);var a=n(2),r=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[e._v("#")]),e._v(" js")]),e._v(" "),t("h2",{attrs:{id:"javascript对象属性-数据属性、访问器属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript对象属性-数据属性、访问器属性"}},[e._v("#")]),e._v(" Javascript对象属性（数据属性、访问器属性）")]),e._v(" "),t("ol",[t("li",[e._v("数据属性：")])]),e._v(" "),t("p",[t("code",[e._v("[[value]]")]),e._v(" 它可以是任何的类型，表示这个数据的值。默认值：undefined")]),e._v(" "),t("p",[t("code",[e._v("[[writable]]")]),e._v(" 它是布尔类型，表示这个数据的[[Value]]是否可以被修改。默认值①：false")]),e._v(" "),t("p",[t("code",[e._v("[[enumerable]]")]),e._v(" 它也是布尔类型，表示这个数据能否用for…in循环或Object.keys来枚举。默认值①：false")]),e._v(" "),t("p",[t("code",[e._v("[[configurable]]")]),e._v(" 它依然是布尔类型，表示这个数据能否被delete运算符删除。默认值①：false")]),e._v(" "),t("blockquote",[t("p",[e._v("①这里的默认值是指在Object.defineProperty()中定义属性的时候的默认值\n用Object.getOwnPropertyDescriptor()获取数据属性")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n    var o =function(){}; // 创建一个新对象\n\n    // 在对象中添加一个属性与数据描述符的示例\n    Object.defineProperty(o, "a", {\n        value : 37,\n        writable : true,\n        enumerable : true,\n        configurable : true\n    });\n\n    Object.defineproperty(o,"eat",{\n        value : function(){\n            console.log("eating!!!");\n        },\n        writable:false,\n        enumerable : true,\n        configurable : true\n    });\n\n    o.a;\n    o.eat();\n\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("访问器属性")])]),e._v(" "),t("p",[t("code",[e._v("[[Get]]")]),e._v(" 它是函数或者undefined类型")]),e._v(" "),t("p",[t("code",[e._v("[[Set]]")]),e._v(" 它是函数或者undefined类型")]),e._v(" "),t("p",[t("code",[e._v("[[enumerable]]")]),e._v(" 它也是布尔类型，表示这个数据能否用for…in循环或Object.keys来枚举。默认值①：false")]),e._v(" "),t("p",[t("code",[e._v("[[configurable]]")]),e._v(" 它依然是布尔类型，表示这个数据能否被delete运算符删除。默认值①：false")]),e._v(" "),t("p",[t("strong",[e._v("使用getter、setter来创建访问器")])]),e._v(" "),t("p",[e._v("语法：get functionName(){functionBody}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    var data={\n        name:'pad',\n        get showName(){return this.name;},\n        set setName(name){this.name=name;}\n    }\n    data.showName;\n    data.setName=\"newName\";\n")])])]),t("p",[e._v('set方法（访问器）只能接受一个参数，并且在调用访问器的时候，不是像调用传统函数funcName(para);一样用括号包裹，而是data.setName="newName";用等号“赋值”')]),e._v(" "),t("p",[t("strong",[e._v("使用Object.defineProperty来创建访问器")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    var data={\n        _name:'pad'\n    };\n    Object.defineProperty(data,\"name\",{\n        get:function(){\n            return this._name;\n        },\n        set:function(newName){\n            this._name = newName;\n        }\n    });\n\n    var person={\n        name:'xiaoming'\n    }\n    Object.defineProperty(person,\"sayName\",{\n        get:function(){\n            return this.name;\n        }\n    });\n    person.sayName;\n")])])]),t("h2",{attrs:{id:"js-数组常用方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-数组常用方法"}},[e._v("#")]),e._v(" js 数组常用方法")]),e._v(" "),t("ul",[t("li",[e._v("concat，把多个数组中的值合并到一起。")]),e._v(" "),t("li",[e._v("fill(value:c T, start?: number, end?: number)")]),e._v(" "),t("li",[e._v("find，查找第一个符合条件的元素，返回值为元素的值；")]),e._v(" "),t("li",[e._v("findIndex，查找第一个符合条件的元素，返回值为元素在数组中的索引；参数是一个函数。")]),e._v(" "),t("li",[e._v("forEach(callback(currentValue [, index [, array]])[,thisArg])，遍历数组，这种遍历不能暂停，只能遍历到结尾自动结束；")]),e._v(" "),t("li",[e._v("includes, 数组中是否包含某个数据；")]),e._v(" "),t("li",[e._v("indexOf，某个 item 在数组中的下标，如果下标为 -1 说明数组中不存在这个元素，常用这个判断数组中是否包含某个元素；")]),e._v(" "),t("li",[e._v("lastIndexOf，某个 item 在数组中的下标，如果下标为 -1 说明数组中不存在这个元素，从末尾开始遍历；")]),e._v(" "),t("li",[e._v("map，遍历数组中的元素，重新组成一个数组；")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const array1 = [1, 4, 9, 16];\n\n  // pass a function to map\n  const map1 = array1.map(x => x * 2);\n\n  console.log(map1);\n  // expected output: Array [2, 8, 18, 32]\n")])])]),t("ul",[t("li",[e._v("slice(beg, end)，取数组中某个范围内的元素组合成一个新的数组，不会改变原数组；")]),e._v(" "),t("li",[e._v("splice(start[, deleteCount[, item1[, item2[, ...]]]])，删除或插入元素到指定的位置。在数组第二个位置插入元素 drum，不进行删除。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let myFish = ['angel', 'clown', 'mandarin', 'sturgeon']\nlet removed = myFish.splice(2, 0, 'drum')\n\n// myFish is [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"] \n// removed is [], no elements removed\n")])])]),t("ul",[t("li",[e._v("some 查询数组中是否有符合某个条件的元素，比如查看数组是否存在偶数。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  const array = [1, 2, 3, 4, 5];\n\n  // checks whether an element is even\n  const even = (element) => element % 2 === 0;\n\n  console.log(array.some(even));\n  // expected output: true\n")])])]),t("h2",{attrs:{id:"对象的遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的遍历"}},[e._v("#")]),e._v(" 对象的遍历")]),e._v(" "),t("h3",{attrs:{id:"for-in"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[e._v("#")]),e._v(" for...in")]),e._v(" "),t("p",[e._v("遍历了自身和继承的所有可枚举属性；不包含不可枚举和Symbol属性")]),e._v(" "),t("h3",{attrs:{id:"object-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[e._v("#")]),e._v(" Object.keys")]),e._v(" "),t("p",[e._v("Object.keys执行后会返回一个数组，而且只遍历了自身可枚举的属性；不包括不可枚举和Symbol属性")]),e._v(" "),t("h3",{attrs:{id:"object-getownpropertynames"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[e._v("#")]),e._v(" Object.getOwnPropertyNames")]),e._v(" "),t("p",[e._v("Object.getOwnPropertyNames执行后返回一个数组，遍历了自身的可枚举属性和不可枚举属性；不包含Symbol属性")]),e._v(" "),t("h3",{attrs:{id:"reflect-ownkeys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys"}},[e._v("#")]),e._v(" Reflect.ownKeys")]),e._v(" "),t("p",[e._v("Reflect.ownKeys执行后返回一个数组，遍历了自身所有属性，包括可枚举、不可枚举、Symbol属性")]),e._v(" "),t("h3",{attrs:{id:"object-getownpropertysymbols"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertysymbols"}},[e._v("#")]),e._v(" Object.getOwnPropertySymbols")]),e._v(" "),t("p",[e._v("Object.getOwnPropertySymbols执行后返回一个数组，遍历了对象自身的所有Symbol属性")]),e._v(" "),t("h2",{attrs:{id:"js-相等判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-相等判断"}},[e._v("#")]),e._v(" js 相等判断")]),e._v(" "),t("p",[t("img",{attrs:{src:n(436),alt:""}})]),e._v(" "),t("h2",{attrs:{id:"js对象拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js对象拷贝"}},[e._v("#")]),e._v(" js对象拷贝")]),e._v(" "),t("h3",{attrs:{id:"浅拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝"}},[e._v("#")]),e._v(" 浅拷贝")]),e._v(" "),t("ol",[t("li",[e._v("展开运算符")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  cloneObj = { ...obj }\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("Object.asign")])]),e._v(" "),t("h3",{attrs:{id:"深拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深拷贝"}},[e._v("#")]),e._v(" 深拷贝")]),e._v(" "),t("ol",[t("li",[e._v("定义一个深拷贝")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  function deepClone(obj) {\n      if (obj === null) return obj;\n      if (typeof obj !== "object") return obj;\n      if (obj instanceof RegExp) return new RegExp(obj);\n      if (obj instanceof Date) return new Date(obj);\n      let result = {}; // 初始化返回结果\n      if (obj instanceof Array) result = [];\n\n      for (const key in obj) {\n          // 保证 key 不是原型属性\n          if (obj.hasOwnProperty(key)) {\n              // 递归调用\n              result[key] = deepClone(obj[key]);\n          }\n      }\n      return result;\n  }\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("JSON.parse(JSON.stringify(obj))")])]),e._v(" "),t("ul",[t("li",[e._v("这种办法会忽略 undefined、function、symbol 和循环引用的对象")])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[e._v("第三方库 lodash")])]),e._v(" "),t("li",[t("p",[e._v("structuredClone(value: any)")])])]),e._v(" "),t("ul",[t("li",[e._v("不能拷贝函数和dom对象")])]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[e._v("MessageChannel 实现的深拷贝只能解决 undefined 和 循环引用对象的问题，对于 Symbol 和 function 依然束手无策。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 深拷贝函数\nfunction deepClone(val) {\n  return new Promise(resolve => {\n    const { port1, port2 } = new MessageChannel()\n    port2.onmessage = e => resolve(e.data)\n    port1.postMessage(val)\n  })\n}\n")])])]),t("h2",{attrs:{id:"前端算法和数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端算法和数据结构"}},[e._v("#")]),e._v(" 前端算法和数据结构")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903656865677326",target:"_blank",rel:"noopener noreferrer"}},[e._v("常见排序和二叉查找树"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://juejin.cn/post/6844903626050273294",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端你应该了解的数据结构与算法"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://juejin.cn/post/7099436855388536869",target:"_blank",rel:"noopener noreferrer"}},[e._v("js排序算法图解"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"数组的组合问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的组合问题"}},[e._v("#")]),e._v(" 数组的组合问题")]),e._v(" "),t("p",[e._v('给定一个数组 arrays = [["a", "b"],["n", "m"],["0", "1"]]，请输出结果[ [a,n,0], [a,n,1], [a,m0,], ... [b,m,1] ]')]),e._v(" "),t("ol",[t("li",[e._v("循环思路")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 循环的方式求数组的组合\nfunction combination(arr) {\n  let result = [];\n  if (arr.length >= 1) {\n    arr[0].forEach((item) => result.push([item]));\n    for (let i = 1; i < arr.length; i++) {\n      const pre = result;\n      result = [];\n      pre.forEach((list) => {\n        arr[i].forEach((item) => result.push([...list, item]));\n      });\n    }\n    return result;\n  }\n}\n\n// 使用reduce\nfunction combination2(arr) {\n  const result = arr.reduce((pre, cur) => {\n    if (pre.length === 0) return cur.map((item) => [item]);\n    let preList = [...pre];\n    let newList = [];\n    preList.forEach((list) => {\n      cur.forEach((item) => newList.push([...list, item]));\n    });\n    return newList;\n  }, []);\n  return result;\n}\n\n// 使用递归\n\nfunction combination3(arr) {\n  let result =  [];\n  const dps = (curArr, i) =>{\n    if(i >= arr.length){\n      result.push([...curArr]);\n      return;\n    }\n    arr[i].forEach((item) => dps([...curArr,item], i+1));\n  }\n  dps([], 0);\n  return result;\n}\n")])])]),t("h2",{attrs:{id:"es6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[e._v("#")]),e._v(" es6")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6844903959283367950",target:"_blank",rel:"noopener noreferrer"}},[e._v("ES6特性"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[e._v("#")]),e._v(" promise")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.cn/post/6945319439772434469",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise 实现细节"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://juejin.cn/post/6844903665686282253",target:"_blank",rel:"noopener noreferrer"}},[e._v("Promise all race"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);