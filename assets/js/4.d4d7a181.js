(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{414:function(t,a,n){t.exports=n.p+"assets/img/bujv.a7064e13.png"},415:function(t,a,n){t.exports=n.p+"assets/img/1680618833509.559b02f3.png"},416:function(t,a,n){t.exports=n.p+"assets/img/645.93087d71.png"},417:function(t,a,n){t.exports=n.p+"assets/img/655.59ae32de.png"},418:function(t,a,n){t.exports=n.p+"assets/img/641.6946845e.png"},419:function(t,a,n){t.exports=n.p+"assets/img/642.c7eb550c.png"},420:function(t,a,n){t.exports=n.p+"assets/img/643.5951f477.png"},421:function(t,a,n){t.exports=n.p+"assets/img/1680618909159.f0179855.png"},422:function(t,a,n){t.exports=n.p+"assets/img/1680621856194.d919870f.png"},423:function(t,a,n){t.exports=n.p+"assets/img/1680622186090.55294df9.png"},424:function(t,a,n){t.exports=n.p+"assets/img/646.cc41b10f.png"},425:function(t,a,n){t.exports=n.p+"assets/img/20210714153733768.123dd3d2.gif"},426:function(t,a,n){t.exports=n.p+"assets/img/647.d6dbc761.png"},427:function(t,a,n){t.exports=n.p+"assets/img/648.9a0fd46c.png"},428:function(t,a,n){t.exports=n.p+"assets/img/314670a097b3b2a76502001a59d1c17.8956b7e3.png"},429:function(t,a,n){t.exports=n.p+"assets/img/15f0d9c75eceff51d3b831371f579e3.ca6b99f5.png"},430:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028094553971-413409481.bf91e8f5.png"},431:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028094757357-2021017993.e2bbf84d.png"},432:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028095146425-765378700.a2304d43.png"},433:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028095337924-1541312247.bcbd04b6.png"},434:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028095435220-926780154.23b3cdb0.png"},435:function(t,a,n){t.exports=n.p+"assets/img/2580638-20211028095641226-1890525219.318aa22d.png"},482:function(t,a,n){"use strict";n.r(a);var e=n(2),i=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"常用前端布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用前端布局"}},[t._v("#")]),t._v(" 常用前端布局")]),t._v(" "),a("p",[a("img",{attrs:{src:n(414),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"flex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[t._v("#")]),t._v(" flex")]),t._v(" "),a("p",[a("img",{attrs:{src:n(415),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("flex-container：布局容器，使用 display：flex 的标签；")]),t._v(" "),a("li",[t._v("flex-item: 容器中的直接子元素；")]),t._v(" "),a("li",[t._v("main-axis：主轴，布局方向为 row 或者 row-reverse 时它是水平方向。布局方向为 column 或者 column-reverse 时它是垂直方向。")]),t._v(" "),a("li",[t._v("cross-axis: 纵轴，与主轴垂直的轴；")]),t._v(" "),a("li",[t._v("main-start: 主轴的起点，布局方向为 row 时它的起点在左侧，row-reverse 为右侧。布局方向为 column 时起点在顶部，column-reverse 时起点为底部。")]),t._v(" "),a("li",[t._v("main-end: 主轴结束的点，与 main-start 相反；")]),t._v(" "),a("li",[t._v("cross-start: 纵轴的起点；")]),t._v(" "),a("li",[t._v("cross-end：纵轴的结束点，与 cross-start 相反；")])]),t._v(" "),a("p",[t._v("flex-container 和 flex-item 都有自己的属性，容器的属性是用来控制所有 flex-item 的布局，以「组」的形式来控制 item 的排列方式。而 item 的属性是用来「单独」控制自己该如何显示。常用的属性：")]),t._v(" "),a("p",[a("img",{attrs:{src:n(416),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"flex-container-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-container-属性"}},[t._v("#")]),t._v(" flex-container 属性")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("flex-direction: 布局方向")]),t._v(" "),a("p",[a("img",{attrs:{src:n(417),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("justify-content: 它决定「主轴」items 的对齐方式")]),t._v(" "),a("p",[a("img",{attrs:{src:n(418),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("align-items: 它决定「纵轴」items 的对齐方式")]),t._v(" "),a("p",[a("img",{attrs:{src:n(419),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("flex-wrap: items 超出容器后该如何显示，是否要多行显示。如果为多行显示，可以把每行看做是一个容器，图中主轴对齐方式为 space-around，每行对齐方式都为 space-around。")]),t._v(" "),a("p",[a("img",{attrs:{src:n(420),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("flex-flow: 它是 flex-direction 和 flex-wrap 的简写，比如 flex-flow: row nowrap，表示 flex-direction 为 row，flex-wrap 为 nowrap。")])]),t._v(" "),a("li",[a("p",[t._v("align-content: 如果为「多行」时，它表示在「纵轴」方向的对齐方式。它的值与 justify-content 值相同。")]),t._v(" "),a("p",[a("img",{attrs:{src:n(421),alt:""}})])])]),t._v(" "),a("blockquote",[a("p",[t._v("1.影响主轴方向的 flex-direction 2.决定主轴 items 对齐方式的 justify-content 3.决定纵轴 items 对齐方式的 align-items 4.决定超出容器后 items 的显示方式的 flex-wrap\n5.direction 和 wrap 合称的 flex-flow 6.多行时，纵轴方向的对齐方式的 align-content")])]),t._v(" "),a("h3",{attrs:{id:"flex-item-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-item-属性"}},[t._v("#")]),t._v(" flex-item 属性")]),t._v(" "),a("ol",[a("li",[t._v("flex-grow（扩展比例）：占剩余空间的比例。flex-grow 的默认值为 0，表示即使有剩余空间，item 也不会扩充。它不能为负数，但是可以为小数。")]),t._v(" "),a("li",[t._v("flex-shrink（收缩比例）：占缺少空间的比例（item*shrink 作为收缩比例），当所有的 item 的宽度和大于容器的宽度，就会出现容器空间不足的情况，这时可以通过缩放比例来缩放每个 item 的宽度。flex-shrink 的默认值是 1，也就是说当空间不足的时候，item 会以同样的尺寸进行缩放。")]),t._v(" "),a("li",[t._v("flex-basis（伸缩基准）：它表示 item 未扩展或收缩之前的宽度，可以理解为 item 未放入容器时该有的尺寸，默认值是 auto。自动计算 item 的初始宽度，浏览器首先会看是否给 item 设置了宽度，代码中未设置则使用的是内容的宽度")])]),t._v(" "),a("p",[t._v("设置 item 的 flex-basis：0，flex-grow：1，最终效果是所有的 item 的尺寸都是一样，设置 flex-basis 为 0 时相当于所有的空间都可以进行分配，每个 item 的初始宽度为 0，这样就达到了所有的 item 宽度一样。\n总的来说 flex-basis 最终的值会以 flex-basis -> width -> content size 的属性依次确定它的值。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("flex：它是 flex-grow、flex-shrink 和 flex-basis 的缩写。")])]),t._v(" "),a("ul",[a("li",[t._v("flex：initial（默认值），等同于 flex：0 1 auto；")]),t._v(" "),a("li",[t._v("flex：auto，等同于 flex: 1 1 auto;")]),t._v(" "),a("li",[t._v("flex：none，等同于 flex: 0 0 auto;")]),t._v(" "),a("li",[t._v("flex：1，等同于 flex: 1 1 0;")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("order：默认值为 0，设置 item 的值可以改变它在 FlexBox 容器中的位置，它的值可以是负数也可以是整数。")])]),t._v(" "),a("blockquote",[a("p",[t._v("开发中常见的场景是，一个 div 中有两个元素 a 和 b，a 要固定宽度，b 要自适应，这时会用 flex 属性，对 a 元素设置 flex:0 0 固定宽度")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(422),alt:""}})]),t._v(" "),a("p",[t._v("item 的 flex-shrink 之和如果大 >=1 ,可以使用上面的公式计算，如果小于 1 需要把收缩值乘以 flex-shrink 之和。flex-grow 也是同样的道理。最终的公式：")]),t._v(" "),a("p",[a("img",{attrs:{src:n(423),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"position"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#position"}},[t._v("#")]),t._v(" position")]),t._v(" "),a("p",[t._v("relative、absolute、fixed、sticky。")]),t._v(" "),a("h3",{attrs:{id:"绝对布局-absolute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绝对布局-absolute"}},[t._v("#")]),t._v(" 绝对布局 absolute")]),t._v(" "),a("p",[t._v("absolute 布局的关键点选择哪一个元素作为布局区域，如果元素的所有父元素均未设置 position 属性（值为 static），布局区域会选择可视区域。如果某个父元素使用了 position 属性（值不为 static），布局区域会选择这个父元素作为布局区域。这种效果有一种约束的感觉，会把子元素限制在父元素内部，不让其“乱跑”。")]),t._v(" "),a("p",[t._v("它会破坏流式布局，并从流失布局中脱离出来，流式布局中不会再为 position：absolute 的元素留有位置。")]),t._v(" "),a("p",[a("img",{attrs:{src:n(424),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"相对布局-relative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相对布局-relative"}},[t._v("#")]),t._v(" 相对布局 relative")]),t._v(" "),a("p",[t._v("relative 的一大特点就是「不会破坏」默认的流式布局，也就是说，你可以让某个元素移动到指定位置，但是你在流式布局中的「坑位」还会保留，如果你想回来，不会没有你的位置，这个位置永远为你保留。")]),t._v(" "),a("blockquote",[a("p",[t._v("relative 通常配合 absolute 一起使用，父元素设置 relative，子元素设置为 absolute 就可以相对父元素脱离流式布局自由定位，而设置为 relative 的父元素还是遵守流失布局。\n这样很方便将整个页面拆分成相对独立的模块，互不影响。")])]),t._v(" "),a("h3",{attrs:{id:"fixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fixed"}},[t._v("#")]),t._v(" fixed")]),t._v(" "),a("p",[t._v("fixed 的作用是把某个元素固定在「可视区域」的某个位置，即使发生滚动，它仍然会固定在某个位置，比如常见的导航栏会一直固定在页面顶部。")]),t._v(" "),a("h3",{attrs:{id:"sticky"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sticky"}},[t._v("#")]),t._v(" sticky")]),t._v(" "),a("p",[t._v("粘性布局，和名字一样，它的功能就是为了让布局粘在某个位置不变。刚开始处于正常的布局，在下拉到一定区域后，变成了吸顶。")]),t._v(" "),a("p",[a("img",{attrs:{src:n(425),alt:""}})]),t._v(" "),a("p",[t._v("sticky 只有在你设置的方向要超出可视区时，才会生效。比如我设置 top：0，那么必须要拉出左可视区也就是 dom 与浏览器左上边的距离小于 0 才会形成吸附效果！！！！")]),t._v(" "),a("h2",{attrs:{id:"grid-布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid-布局"}},[t._v("#")]),t._v(" grid 布局")]),t._v(" "),a("p",[a("img",{attrs:{src:n(426),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),a("ol",[a("li",[t._v("grid container（grid 容器）")]),t._v(" "),a("li",[t._v("grid item（grid 项）：一个 grid item 可能会由多个 cell 构成")]),t._v(" "),a("li",[t._v("单元格 cell")]),t._v(" "),a("li",[t._v("grid track（grid 轨道）：track 指的是行或者列。")]),t._v(" "),a("li",[t._v("网格线 line")]),t._v(" "),a("li",[t._v("grid area（grid 区域）：一个 grid 区域可以放多个 item")])]),t._v(" "),a("h3",{attrs:{id:"容器属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器属性"}},[t._v("#")]),t._v(" 容器属性")]),t._v(" "),a("ol",[a("li",[t._v("grid-template-columns：「显式」地设置「列宽」和分割线的名称，分割线段名称使用很少。")])]),t._v(" "),a("ul",[a("li",[t._v("使用固定宽度，在 container 中设置具体的值，不同值使用空格隔开")]),t._v(" "),a("li",[t._v("使用百分比，直接占满容器 40% + 60% = 100%")]),t._v(" "),a("li",[t._v("使用弹性单位 fr，可以按比例分配容器的大小。总共分成 3 份，第一列占 1 份，第二列占 2 份")]),t._v(" "),a("li",[t._v("使用关键字 auto，它会填满容器的可用空间")]),t._v(" "),a("li",[t._v("使用 minmax 设置长度范围，接受 2 个参数，分别表示最大值和最小值。下面设置列的最小宽度为 100px，最大宽度为 1fr")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  .container {\n      grid-template-columns: minmax(100px, 1fr) 1fr;\n      display: grid;\n  }\n")])])]),a("ul",[a("li",[t._v("使用 repeat 可以表示多个值，grid-template-columns：repeat(2, 1fr) 与 grid-template-columns：1fr 1fr 等价")]),t._v(" "),a("li",[t._v("max-content: 内容的最大宽度，min-content 内容的最小宽度")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("grid-template-rows:是定义 grid 布局行的分割线名称和轨道尺寸。它的取值可以参考 grid-template-columns 的取值。")])]),t._v(" "),a("li",[a("p",[t._v("grid-gap：grid-column-gap：列与列之间的间隙；grid-row-gap：行与行之间的间隙；grid-gap 为 grid-row-gap 和 grid-column-gap 的缩写")])])]),t._v(" "),a("h3",{attrs:{id:"grid-area-区域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid-area-区域"}},[t._v("#")]),t._v(" grid-area（区域）")]),t._v(" "),a("p",[a("strong",[t._v("方式一：")])]),t._v(" "),a("p",[t._v("grid 布局中的属性 grid-row 和 grid-column，分别表示在网格布局中行与列的位置，这里用网格线的编号表示，开始结束使用 “/” 分开")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    .tree {\n        background-color: green;\n        grid-row: 10 / 11;\n        grid-column: 1 / -1;\n    }\n    .main {\n        background-color: #eeeeee;\n        display: grid;\n        margin: 10px 60px;\n        grid-template-columns: repeat(8, 1fr);\n        grid-template-rows: repeat(9, 30px);\n        grid-auto-rows: 60px;\n        row-gap: 40px;\n        column-gap: 60px;\n    }\n")])])]),a("p",[a("strong",[t._v("方式二：")]),t._v("\n方式一中，如果想加个游泳池，不得不重新修改各个区域的编号。可以使用 grid-template-areas 来重新设计一个与上面一模一样的图。这个属性可以根据区域名称把某些 item 组合起来，区域名称需要通过 item 属性 grid-area 来定义。使用的时候每个值需要使用空格隔开，而且必须组成一个矩形，对于不能组成矩形的属性将不起作用。它的值可以是：")]),t._v(" "),a("ol",[a("li",[t._v("通过属性 grid-area 定义名字；")]),t._v(" "),a("li",[t._v("使用“.”指定一个空的 cell;")]),t._v(" "),a("li",[t._v("none 不定义区域。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<style>\n    .main {\n        background-color: #eeeeee;\n        display: grid;\n        grid-template-columns: repeat(8, 1fr);\n        grid-template-rows: repeat(9, 40px);\n        grid-auto-rows: 40px;\n        row-gap: 20px;\n        column-gap: 20px;\n        grid-template-areas:\n            "caiyuan caiyuan caiyuan caiyuan caiyuan caiyuan guoyuan guoyuan"\n            "caiyuan caiyuan caiyuan caiyuan caiyuan caiyuan guoyuan guoyuan"\n            "rest_area rest_area house house house house guoyuan guoyuan"\n            "rest_area rest_area house house house house guoyuan guoyuan"\n            "rest_area rest_area house house house house guoyuan guoyuan"\n            "rest_area rest_area house house house house guoyuan guoyuan"\n            "rest_area rest_area house house house house guoyuan guoyuan"\n            "rest_area rest_area huayuan huayuan huayuan huayuan guoyuan guoyuan"\n            "rest_area rest_area huayuan huayuan huayuan huayuan guoyuan guoyuan"\n            ". . tree tree tree tree . .";\n    }\n    .huayuan {\n        background-color: brown;\n        grid-area: huayuan;\n    }\n    .caiyuan {\n        background-color: cadetblue;\n        grid-area: caiyuan;\n    }\n    .house {\n        background-color: cornflowerblue;\n        grid-area: house;\n    }\n    .rest_area {\n        background-color: darksalmon;\n        grid-area: rest_area;\n    }\n    .guoyuan {\n        background-color: hotpink;\n        grid-area: guoyuan;\n    }\n    .tree {\n        background-color: green;\n        grid-area: tree;\n    }\n    </style>\n\n    <body>\n        <div class="main">\n            <div class="huayuan"></div>\n            <div class="caiyuan"></div>\n            <div class="house"></div>\n            <div class="rest_area"></div>\n            <div class="guoyuan"></div>\n            <div class="tree"></div>\n        </div>\n    </body>\n')])])]),a("h3",{attrs:{id:"grid-布局对齐属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#grid-布局对齐属性"}},[t._v("#")]),t._v(" grid 布局对齐属性")]),t._v(" "),a("p",[t._v("grid 布局是二维的，可以通过横轴和交叉轴来对齐 grid item。它有一条轴叫 inline axis，它与文字的书写模式（水平书写、竖直书写）有关，由于我们通常不会涉及到文字的书写模式，暂且把 inline axis 看做是横轴，把 block axis 看做是与横轴交叉的轴。")]),t._v(" "),a("p",[t._v("在「水平轴」上的对齐方式主要通过 justify-content, justify-items and justify-self 来设置，都以 justify- 开头。为了方便记忆你可以把主（zhu）轴与 justify 中的 u 进行对应起来。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("justify-items（容器属性）: 定义 grid-item 在 grid-area（布局区域）水平方向的（左右）对齐方式：\n"),a("img",{attrs:{src:n(427),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("justify-content:按照主轴进行分配，在 grid 容器中按照 inline axis 进行分派。在 grid 布局中，如果所有的 items 尺寸和小于 grid 容器的尺寸，可以通过 justify-content 设置内容在水平方向上的对齐方式。\n"),a("img",{attrs:{src:n(428),alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("justify-self：表示 item 在布局区域水平方向轴的对齐方式。")])])]),t._v(" "),a("p",[t._v("在「竖直轴」上的对齐方式主要通过 align-content, align-items and align-self 来设置，都以 align- 开头。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("align-items：这个属性适用于 FlexBox 和 grid 布局，在 FlexBox 布局中它表示 items 在纵轴上的对齐方式；在 grid 布局中，表示 item 在 grid area 竖直方向上对齐方式。")])]),t._v(" "),a("li",[a("p",[t._v("align-content: 如果所有的 items 尺寸和小于 grid 容器的尺寸，可以通过 align-content 设置内容在竖直轴上的对齐方式")])])]),t._v(" "),a("p",[a("img",{attrs:{src:n(429),alt:""}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("align-self: 表示自己在竖直轴上的对齐方式")])]),t._v(" "),a("li",[a("p",[t._v("place-content: 是 align-content 和 justify-content 的缩写")])]),t._v(" "),a("li",[a("p",[t._v("place-items: 它是 align-items 和 justify-items 的缩写方式")])])]),t._v(" "),a("h2",{attrs:{id:"float"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#float"}},[t._v("#")]),t._v(" float")]),t._v(" "),a("p",[t._v("清除浮动方式：")]),t._v(" "),a("ol",[a("li",[t._v("额外标签法（在最后一个浮动标签后，新加一个标签，给其设置clear：both；）（不推荐）")]),t._v(" "),a("li",[t._v("使用容器的伪元素来clear清除浮动")]),t._v(" "),a("li",[t._v("创建BFC就可以包含住浮动的子元素了，设置overflow的方法（hidden和auto都可以实现）\n1、float的值不是none。\n2、position的值不是static或者relative。\n3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex\n4、overflow的值不是visible")])]),t._v(" "),a("blockquote",[a("p",[t._v("BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。")])]),t._v(" "),a("h2",{attrs:{id:"实现前端常用布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现前端常用布局"}},[t._v("#")]),t._v(" 实现前端常用布局")]),t._v(" "),a("h3",{attrs:{id:"水平垂直居中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#水平垂直居中"}},[t._v("#")]),t._v(" 水平垂直居中")]),t._v(" "),a("ol",[a("li",[t._v("绝对定位（absolute）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" // 子元素宽高确定的情况\n  .logo {\n      position: absolute;\n      width: 160px;\n      height: 100px;\n      top: 50%;\n      left: 50%;\n      margin-top: -50px;\n      margin-left: -80px;\n      background-color #5b83fd;\n  }\n\n  // 这种方式比较常用，父子元素都不确定宽高的情况也适用。\n  .logo {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: #5b83fd;\n  }\n\n  // 父子元素宽高都未知时也适用。\n  .work2 {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin:auto;\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("flex")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("  .center-wrap {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n  }\n")])])]),a("h3",{attrs:{id:"水平居中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#水平居中"}},[t._v("#")]),t._v(" 水平居中")]),t._v(" "),a("ol",[a("li",[t._v("display: block + margin: 0 auto\n适用于 display 为 block 的元素。如果元素脱离文档流，该方式将失效。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".logo {\n    width: 160px;\n    height: 100px;\n    margin: 0 auto;\n    background-color: #5b83fd;\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("flexbox 布局，设置容器属性就行（注意IE浏览器）")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".center-wrap {\n    display: flex;\n    justify-content: center;\n    background-color: #282c34;\n    height: 140px;\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用 transform，对宽高无要求\n对于脱离文档流的元素可通过下面这种方式实现。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".logo {\n    position: absolute;\n    padding: 10px;\n    left: 50%;\n    transform: translate(-50%, 0);\n    background-color: #5b83fd;\n}\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("inline-block + text-align\ndisplay 需要设置为 inline-block，在父元素中设置 text-algin 让子元素进行对齐。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".content-wrap {\n    position: relative;\n    background-color: #282c34;\n    height: 140px;\n    text-align: center;\n}\n.logo {\n    display: inline-block;\n    background-color: #5b83fd;\n    padding: 10px;\n}\n")])])]),a("h3",{attrs:{id:"两列-左边宽度固定、右边自适应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两列-左边宽度固定、右边自适应"}},[t._v("#")]),t._v(" 两列（左边宽度固定、右边自适应）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div class="content-wrap">\n    <div class="left"></div>\n    <div class="right"></div>\n</div>\n')])])]),a("ol",[a("li",[t._v("左浮动定宽、右 margin-left")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".content-wrap {\n    background-color: #282c34;\n    height: 100px;\n}\n\n.left, .right {\n    height: 100%;\n}\n\n.left {\n    float: left;\n    width: 140px;\n    background-color: #5b83fd;\n}\n\n.right {\n    margin-left: 140px;\n    background-color: #F7B500;\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("左浮动定宽、右 overflow")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".content-wrap {\n    background-color: #282c34;\n    height: 100px;\n}\n\n.left, .right {\n    height: 100%;\n}\n\n.left {\n    float: left;\n    width: 140px;\n    background-color: #5b83fd;\n}\n\n.right {\n    overflow: hidden;\n    background-color: #FA6400;\n}\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("flex")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".content-wrap {\n    display: flex;\n    height: 100px;\n    background-color: #282c34;\n}\n.left {\n    height: 100%;\n    width: 140px;\n    background-color: #5b83fd;\n}\n.right {\n    height: 100%;\n    flex: 1;\n    background-color: #6DD400;\n}\n")])])]),a("h3",{attrs:{id:"三列布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三列布局"}},[t._v("#")]),t._v(" 三列布局")]),t._v(" "),a("ol",[a("li",[t._v("绝对定位法\n原理是将左右两边使用absolute定位，因为绝对定位使其脱离文档流，后面的 middle 会自然流动到他们上面，然后使用margin属性，留出左右元素的宽度，既可以使中间元素自适应屏幕宽度。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<style>\n        *{\n            margin: 0;\n            padding: 0;\n            font-size: 50px;\n        }\n        .main{\n            position: relative;\n            width: 100%;\n            height: 500px;\n        }\n        .left{\n            position:absolute;\n            top: 0;\n            left: 0;\n            width: 200px;\n            height: 100%;\n            background-color: #3898b1;\n        }\n        .right{\n            position:absolute;\n            top: 0;\n            right: 0;\n            width: 200px;\n            height: 100%;\n            background-color: #ce7486;\n        }\n        .middle{\n            margin: 0 200px;\n            height: 100%;\n            background-color: #cbaf91;\n        }\n    </style>\n</head>\n<body>\n\n<div class="main">\n    <div class="left">left</div>\n    <div class="middle">middle</div>\n    <div class="right">right</div>\n</div>\n\n</body>\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("自身浮动法\n原理就是对左右分别左浮动和右浮动，float使左右两个元素脱离文档流，中间元素正常在正常文档流中。对中间文档流使用margin指定左右外边距进行定位。\n该布局法的不足是三个元素的顺序，middle一定要放在最后，middle占据文档流位置，所以一定要放在最后，左右两个元素位置没有关系。当浏览器窗口很小的时候，右边元素会被挤到下一行。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<style>\n        *{\n            margin: 0;\n            padding: 0;\n            font-size: 50px;\n        }\n        .main{\n            width: 100%;\n            height: 500px;\n        }\n        .left{\n            float: left;\n            width: 200px;\n            height: 100%;\n            background-color: #3898b1;\n        }\n        .right{\n            float: right;\n            width: 200px;\n            height: 100%;\n            background-color: #ce7486;\n        }\n        .middle{\n            margin: 0 200px;\n            height: 100%;\n            background-color: #cbaf91;\n        }\n    </style>\n</head>\n<body>\n\n<div class="main">\n    <div class="left">left</div>\n    <div class="right">right</div>\n    <div class="middle">middle</div>\n</div>\n\n</body>\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("flex 布局法")])]),t._v(" "),a("p",[t._v("原理就是为父元素添加样式display：flex，左右固定宽度，中间设置flex:1,middle一定要放在中间。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<style>\n        *{\n            margin: 0;\n            padding: 0;\n            font-size: 50px;\n        }\n        .main{\n            display: flex;\n            width: 100%;\n            height: 500px;\n        }\n        .left{\n            width: 200px;\n            height: 100%;\n            background-color: #3898b1;\n        }\n        .right{\n            width: 200px;\n            height: 100%;\n            background-color: #ce7486;\n        }\n        .middle{\n            flex: 1;\n            height: 100%;\n            background-color: #cbaf91;\n        }\n    </style>\n</head>\n<body>\n\n<div class="main">\n    <div class="left">left</div>\n    <div class="middle">middle</div>\n    <div class="right">right</div>\n</div>\n\n</body>\n')])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("圣杯布局\n原理主要是margin负值法，接下来我们一步一步分析它的实现过程：")])]),t._v(" "),a("ul",[a("li",[t._v("middle 一定要写在最前面")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<div class="main">\n    <div class="middle">middle</div>\n    <div class="left">left</div>\n    <div class="right">right</div>\n</div>\n')])])]),a("ul",[a("li",[t._v("left和right设置固定宽度，middle设置100%撑满：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<style>\n        *{\n            margin: 0;\n            padding: 0;\n            font-size: 50px;\n        }\n        .left{\n            width: 200px;\n            background-color: #3898b1;\n        }\n        .right{\n            width: 200px;\n            background-color: #ce7486;\n        }\n        .middle{\n            width: 100%;\n            background-color: #cbaf91;\n        }\n    </style>\n")])])]),a("p",[a("img",{attrs:{src:n(430),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("设置全部左浮动，由于middle宽度为100%，所以占了一行")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".left,.right,.middle{\n    float: left;\n}\n")])])]),a("p",[a("img",{attrs:{src:n(431),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("left设置 margin-left: -100%; 拉回行头")])]),t._v(" "),a("p",[t._v("设置margin-left为负值会让元素自身位置发生变化，由于浮动的关系，元素被往左拉了一个center元素的宽度(100%)故回到了开头")]),t._v(" "),a("p",[a("img",{attrs:{src:n(432),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("right元素设置margin-left: -200px;拉回行尾")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(433),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("现在的问题就是左右两边的元素覆盖了center元素的内容，我们可以给容器main加上两边padding")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".main{\n       padding: 0 200px;\n}\n")])])]),a("p",[a("img",{attrs:{src:n(434),alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("在设置了padding后，左右元素都被挤了进来，我们可以设置position:relative解决，因为浮动元素已经脱离了文档流，所以不能设置absolute。 通过设置left和right元素的相对位置，实现定位：")])]),t._v(" "),a("p",[a("img",{attrs:{src:n(435),alt:""}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<style>\n    *{\n        margin: 0;\n        padding: 0;\n        font-size: 50px;\n    }\n    .main{\n        padding: 0 200px;\n    }\n    .left,.right,.middle{\n        position: relative;\n        float: left;\n    }\n    .left{\n        margin-left: -100%;\n        left: -200px;\n        width: 200px;\n        background-color: #3898b1;\n    }\n    .right{\n        margin-left: -200px;\n        right: -200px;\n        width: 200px;\n        background-color: #ce7486;\n    }\n    .middle{\n        width: 100%;\n        background-color: #cbaf91;\n    }\n</style>\n")])])])])}),[],!1,null,null,null);a.default=i.exports}}]);