(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{412:function(n,t,e){n.exports=e.p+"assets/img/640.5c818f45.jpg"},413:function(n,t,e){n.exports=e.p+"assets/img/640.cedde410.png"},481:function(n,t,e){"use strict";e.r(t);var a=e(2),i=Object(a.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[n._v("#")]),n._v(" css")]),n._v(" "),t("h2",{attrs:{id:"css-使用方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-使用方式"}},[n._v("#")]),n._v(" css 使用方式")]),n._v(" "),t("p",[n._v("下图是 CSS 的加载过程\n"),t("img",{attrs:{src:e(412),alt:""}})]),n._v(" "),t("ol",[t("li",[n._v("通过 link 的方式引用 CSS 样式")]),n._v(" "),t("li",[n._v("在 HTML 中的 head 位置添加 style 标签（偶尔用）")]),n._v(" "),t("li",[n._v("内联样式：直接作用于元素上，只会对一个元素起作用（不到万不得已不用）")])]),n._v(" "),t("h2",{attrs:{id:"css选择器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css选择器"}},[n._v("#")]),n._v(" css选择器")]),n._v(" "),t("ol",[t("li",[n._v("class 选择器")]),n._v(" "),t("li",[n._v("ID 选择器")]),n._v(" "),t("li",[n._v("通用选择器（Universal selector）")]),n._v(" "),t("li",[n._v("属性选择器（Attribute selectors）：根据属性来匹配 HTML 元素。还有类似于“正则表达式”的属性选择器，比如："),t("code",[n._v("[attr^=val]")]),n._v(" 匹配以 val 开头的元素，"),t("code",[n._v("[attr$=val]")]),n._v(" ,匹配以 val 结尾的元素，"),t("code",[n._v("[attr*=val]")]),n._v("匹配包含 val 的字符串的元素。")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/* 匹配所有使用属性 "lefe" 的元素 */\n  [lefe] {\n      color: green;\n  }\n\n  /*匹配所有使用属性为 "lefe"，且值为 liquid 的元素*/\n  [lefe="liquid"] {\n      background-color: goldenrod;\n  }\n\n  /*匹配所有使用属性为 "lefe"，且值包含 spicy 的元素*/\n  [lefe~="spicy"] {\n      color: red;\n  }\n')])])]),t("ol",{attrs:{start:"5"}},[t("li",[n._v("伪元素选择器，它以“ :: ” 为标识符。")]),n._v(" "),t("li",[n._v("伪类选择器，它以“ : ” 为标识符。")]),n._v(" "),t("li",[n._v("组合选择器（Combinators）:\n"),t("ul",[t("li",[n._v("A B {} : A 元素的所有后代元素 B 都会起作用。")]),n._v(" "),t("li",[n._v("A > B {} : A 元素的直接子节点会起作用。")]),n._v(" "),t("li",[n._v("A + B {} : 匹配 A 的下一个兄弟节点，AB 具有相同的父节点，并且 B 紧跟在 A 的后面")]),n._v(" "),t("li",[n._v("A ~ B {} : B 是 A 之后的任意一个兄弟节点。")])])]),n._v(" "),t("li",[n._v("组选择器 A, B：A 和 B 元素具有同一规则的 CSS 样式")])]),n._v(" "),t("p",[n._v("（1）p:first-child\n（2）div:nth-child(2)\n（3）.box2 :nth-child(1)\n（4）#box3 :nth-child(2)\n这几个选择器需要留意一下，第（1）、（2）这两个选择器是伪选择器，而 （3）、（4）是后代选择器，注意两个选择器中间的空格。")]),n._v(" "),t("h2",{attrs:{id:"css选择器权重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css选择器权重"}},[n._v("#")]),n._v(" css选择器权重")]),n._v(" "),t("p",[t("img",{attrs:{src:e(413),alt:"img"}})]),n._v(" "),t("ul",[t("li",[n._v("！important")]),n._v(" "),t("li",[n._v("g：直接在元素中使用属性，权重最高，可以看做 1-0-0-0；")]),n._v(" "),t("li",[n._v("z：id选择器，权重次子，可以看做 0-1-0-0；")]),n._v(" "),t("li",[n._v("y：类、伪类、属性选择器，权重低，可以看做 0-0-1-0；")]),n._v(" "),t("li",[n._v("x：元素、伪元素选择器，权重最低，可以看做 0-0-0-1；")]),n._v(" "),t("li",[t("code",[n._v("*")])])]),n._v(" "),t("h2",{attrs:{id:"规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[n._v("#")]),n._v(" @规则")]),n._v(" "),t("p",[n._v("参考： "),t("a",{attrs:{href:"https://www.cnblogs.com/clwydjgs/p/10434644.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("带@的 css 语法，你知道多少？"),t("OutboundLink")],1),n._v("\ncss 的顶层样式表由两种规则组成的规则列表构成，一种称为 at—rule 规则，也就是 at 规则，另一种是 qualified rule，也就是普通规则。")]),n._v(" "),t("ul",[t("li",[n._v("@charset css 文件使用的编码方式，必须在最前面使用")]),n._v(" "),t("li",[n._v("@import 引入一个 css 文件，除了@charset 规则不会被引入，可以引入一个文件的全部内容。")]),n._v(" "),t("li",[n._v("@key-frames 产生一种数据，用于定义动画关键帧")]),n._v(" "),t("li",[n._v("@fontfacce 定义一种字体，icon font 技术就是利用这个特性实现的")]),n._v(" "),t("li",[n._v("@media 语法规则是：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  @media mediaType and|not|only (media feture) {\n    // css\n  }\n")])])]),t("p",[n._v("“自适应网页设计的核心：就是 css 引入 Media Query 的模块 ，他的意思就是，自动探测屏幕宽度，然后加载相应的 css 文件。”")]),n._v(" "),t("h2",{attrs:{id:"border"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#border"}},[n._v("#")]),n._v(" border")]),n._v(" "),t("ol",[t("li",[n._v("做三角形图标：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  .triangle {\n    width: 0;\n    /* width style */\n    border: 20px solid;\n    /* top [left, tight] bottom*/\n    border-color: #f30 transparent transparent;\n  }\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("扩大点击区域：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("  .icon {\n      background-color: antiquewhite;\n      width: 15px;\n      height: 15px;\n      border: 11px solid transparent;\n  }\n")])])]),t("h2",{attrs:{id:"盒子模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#盒子模型"}},[n._v("#")]),n._v(" 盒子模型")]),n._v(" "),t("ol",[t("li",[n._v("块级元素（block）")])]),n._v(" "),t("ul",[t("li",[n._v("可以使用 width 和 height 属性")]),n._v(" "),t("li",[n._v("使用 padding、margin 和 border 会影响其它元素的位置")])]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[n._v("行内元素（inline）")])]),n._v(" "),t("ul",[t("li",[n._v("不会单行显示，除非一行没有足够多的空间，它会一个接一个地排列")]),n._v(" "),t("li",[n._v("width 和 height 属性不起作用")])]),n._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[n._v("inline-block 结合了 inline 和 block 这两种元素的特性，它与块级元素不同的是：元素不会单独占用一行；相同的是：可以使用 width 和 height，可以通过 padding、margin 和 border 来控制元素的显示位置。说白了就是除了不会单独占一行，其余的与块级元素一致。")])]),n._v(" "),t("p",[n._v("标准的盒子模型： content+padding+border")]),n._v(" "),t("p",[n._v("诡异盒子模型： content")]),n._v(" "),t("h2",{attrs:{id:"文本换行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文本换行"}},[n._v("#")]),n._v(" 文本换行")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" //单行：\n  .singal-line {\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n  }\n\n  //多行：\n.two-line {\n    display: -webkit-box;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n}\n")])])]),t("h2",{attrs:{id:"css-动画"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-动画"}},[n._v("#")]),n._v(" css 动画")]),n._v(" "),t("ol",[t("li",[n._v("animation：animation 是通过 CSS 给某个 HTML 元素设置一个动画，可以通过下面这些属性来控制动画。")])]),n._v(" "),t("ul",[t("li",[n._v("animation-name: 动画的名字，通过 @keyframes 定义的名字。")]),n._v(" "),t("li",[n._v("animation-duration：动画的持续时间；")]),n._v(" "),t("li",[n._v("animation-delay：动画开始时的延迟时间；")]),n._v(" "),t("li",[n._v("animation-iteration-count：动画循环次数；")]),n._v(" "),t("li",[n._v("animation-direction：动画的方向，比如 alternate 表示先正向后逆序，nomal 正向，reverse 逆序；")]),n._v(" "),t("li",[n._v("animation-timing-function：动画的时间曲线，它的值有 ease、ease-in、ease-out、ease-in-out、linear；")]),n._v(" "),t("li",[n._v("animation-fill-mode：动画执行后的填充模式，它的值有 forwards、backwards、none、both；")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('\n  <!DOCTYPE html>\n  <html lang="en">\n\n  <head>\n      <meta charset="UTF-8">\n      <meta name="viewport" content="width=device-width, initial-scale=1.0">\n      <meta http-equiv="X-UA-Compatible" content="ie=edge">\n      <title>动画</title>\n      <style>\n          .bg-box {\n              background-color: gray;\n              width: 100px;\n              height: 100px;\n          }\n\n          .bg-box-animation {\n              /* 动画的名字和动画执行的时间，需要把动画绑定到某个选择器上才会执行*/\n              animation: background-change 2s;\n          }\n\n          /* 动画的关键帧 ，帧数可以为任意多个 */\n          @keyframes background-change {\n              0% {\n                  background-color: antiquewhite;\n              }\n\n              50% {\n                  background-color: brown;\n              }\n\n              100% {\n                  background-color: blue;\n              }\n          }\n\n          .move-box {\n              background-color: red;\n              position: relative;\n              width: 60px;\n              height: 60px;\n              border-radius: 30px;\n          }\n\n          .move-box-animation {\n              /* animation: name duration timing-function delay iteration-count direction fill-mode; */\n              /* 名字，为 @keyframes 的名字 */\n              animation-name: move;\n              /*  动画的时间 */\n              animation-duration: 5s;\n              /* 动画执行函数 */\n              animation-timing-function: ease-in-out;\n              /* 动画延迟时间 */\n              animation-delay: 1s;\n              /* 动画重复次数 */\n              animation-iteration-count: 10;\n              /* 动画的方向，先正向后逆向 */\n              animation-direction: alternate;\n              /* 动画执行后的填充模式 */\n              animation-fill-mode: backwards;\n              /* 动画的运行状态 */\n              animation-play-state: running;\n          }\n\n          @keyframes move {\n              0% {\n                  left: 0;\n                  top: 0;\n              }\n\n              25% {\n                  left: 100px;\n                  top: 0;\n              }\n\n              50% {\n                  left: 100px;\n                  top: 100px;\n              }\n\n              75% {\n                  left: 0;\n                  top: 100px;\n              }\n\n              100% {\n                  left: 0;\n                  top: 0;\n              }\n          }\n  </style>\n  </head>\n\n  <body>\n      <div class="bg-box bg-box-animation"></div>\n      <div class="move-box move-box-animation"></div>\n  </body>\n\n  </html>\n\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[n._v("transition: 过渡动画，修改某些属性的时候不会立刻生效，它会以动画的形式逐渐过渡到要设置的值。比如设置某个 HTML 元素的背景颜色，修改宽度和高度。")])]),n._v(" "),t("ul",[t("li",[n._v("transition-property: 指需要使用过渡动画的属性，这里设置了背景色，高度和宽度。也可以通过关键字 all 设置所有的属性；")]),n._v(" "),t("li",[n._v("transition-duration: 动画持续的时间，可以单独控制某个属性的时间， transition-duration：1.8s, 1.0s, 1.0s 表示修改 background-color 需要 1.8s, 修改 height 需要 1.0s,  修改 width 需要 1.0s;")]),n._v(" "),t("li",[n._v("transition-delay：动画开始时需要延迟多长时间才开始执行；")]),n._v(" "),t("li",[n._v("transition-timing-function：表示动画执行时的时间函数，不同函数走过的曲线不一样；")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n  <html lang="en">\n  <head>\n      <meta charset="UTF-8">\n      <meta name="viewport" content="width=device-width, initial-scale=1.0">\n      <meta http-equiv="X-UA-Compatible" content="ie=edge">\n      <title>动画</title>\n      <style>\n          #move-transition-box {\n              background-color: cornflowerblue;\n              width: 100px;\n              height: 100px;\n          }\n          .move-transition {\n              /* transition-property: all; */\n              transition-property: background-color, height, width;\n              transition-duration: 1.8s, 1.0s, 1.0s;\n              transition-delay: 0.1s;\n              transition-timing-function: linear;\n          }\n  </style>\n  </head>\n\n  <body>\n      <div id ="move-transition-box" class="move-transition" onclick="scale()"></div>\n      <script>\n      function scale() {\n          let tbox = document.getElementById(\'move-transition-box\');\n          tbox.style.height = 200 + \'px\';\n          tbox.style.width = 200 + \'px\';\n          tbox.style.backgroundColor = \'red\';\n      }\n  <\/script>\n  </body>\n  </html>\n')])])]),t("h2",{attrs:{id:"css单位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css单位"}},[n._v("#")]),n._v(" css单位")]),n._v(" "),t("ol",[t("li",[n._v("em: 它是相对于「自身或父元素」的 font-size 来计算自身的尺寸")]),n._v(" "),t("li",[n._v("rem（font size of root element）: 这个单位是依据「根元素 html 标签」的 font-size 来计算最终的值")]),n._v(" "),t("li",[n._v("vw（viewport width），可视区域宽度，比如设置 50vw，相当于可视区域宽度的一半；")]),n._v(" "),t("li",[n._v("vh（viewport height），可视区域高度，比如设置 50vh，相当于可视区域高度的一半")]),n._v(" "),t("li",[n._v("vmax: vw 和 vh 中最大的")]),n._v(" "),t("li",[n._v("vmin: vw 和 vh 中最小的")])]),n._v(" "),t("p",[t("strong",[n._v("vue中使用rem进行响应式布局")]),n._v("\nrem单位都是相对于根元素html的font-size来决定大小的,根元素的font-size相当于提供了一个基准，当页面的size发生变化时，只需要改变font-size的值，那么以rem为固定单位的元素的大小也会发生响应的变化。")]),n._v(" "),t("p",[n._v("如果通过rem来实现响应式的布局，只需要根据视图容器的大小，动态的改变font-size即可。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('  //utils/rem.js\n  (function() {\n    const baseSize = 1920;\n    window.baseType = "width";\n    window.baseSize = baseSize;\n    function setRem() {\n      let scale = document.documentElement.clientWidth / baseSize;\n      document.documentElement.style.fontSize = scale * 100 + "px";\n    }\n\n    setRem();\n    window.onresize = function() {\n      setRem();\n    };\n  })();\n\n  // main.js\n  import "./utils/rem";\n\n')])])]),t("p",[t("strong",[n._v("如何让 chrome 支持 10px 的文字？")]),n._v("\nfont-size: 12px; -webkit-transform: scale(0.84);\nfont-size: 20px; -webkit-transform: scale(0.5);")]),n._v(" "),t("h2",{attrs:{id:"line-height-如何继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#line-height-如何继承"}},[n._v("#")]),n._v(" line-height 如何继承")]),n._v(" "),t("ul",[t("li",[n._v("父元素的 line-height 是具体数值，则子元素 line-height 继承该值。")]),n._v(" "),t("li",[n._v("当父元素line-height的值为比例时，如2、1.5，则子元素的line-height为子元素的font-size值乘上该比例。")]),n._v(" "),t("li",[n._v("父元素的 line-height 是百分比，则子元素 line-height 继承的是父元素的 font-size * 百分比 计算出来的值。")])]),n._v(" "),t("p",[n._v("参考： https://blog.csdn.net/zx1041561837/article/details/127933381")]),n._v(" "),t("h2",{attrs:{id:"css画扇形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css画扇形"}},[n._v("#")]),n._v(" css画扇形")]),n._v(" "),t("ol",[t("li",[n._v("css3的clip-path")]),n._v(" "),t("li",[n._v("底部通过border-radis设置一个圆，上面设置两个绝对定位的矩形，然后两个矩形一圆心为中心进行"),t("code",[n._v("transform: rotate()")])])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <div class="shanxing">\n      <div class="my1"></div>\n      <div class="my2"></div>\n    </div>\n\n    //css\n    .my1, .my2{\n      /* width: 100px;\n      height: 200px; */\n      position: absolute;\n      border: 100px #fff solid;\n      border-radius: 100px;\n      top:0;\n      left: 0;\n    }\n    .my1{\n      border-color: transparent transparent #fff #fff;\n    }\n    .my2{\n      border-color: #fff #fff transparent transparent;\n      transform: rotate(30deg);\n    }\n')])])]),t("h2",{attrs:{id:"回流与重绘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回流与重绘"}},[n._v("#")]),n._v(" 回流与重绘")]),n._v(" "),t("blockquote",[t("p",[n._v("例子中，有三个样式属性被修改了，每一个都会影响元素的几何结构，引起回流。当然，大部分现代浏览器都对其做了优化，因此，只会触发一次重排。但是如果在旧版的浏览器或者在上面代码执行的时候，有其他代码访问了布局信息(上文中的会触发回流的布局信息)，那么就会导致三次重排。")])])])}),[],!1,null,null,null);t.default=i.exports}}]);